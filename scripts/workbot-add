#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2020, 2021 Genome Research Ltd. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @author Keith James <kdj@sanger.ac.uk>

import argparse
import logging
from datetime import datetime, timedelta

from workbot import get_wb_session, get_wh_session
from workbot.base import WorkBotError, make_workbot
from workbot.enums import WorkType
from workbot.irods import RodsError
from workbot.ont import ONTWorkBroker
from workbot.utilities import valid_iso_date, valid_work_type

description = """
Adds new experiments to the workbot analysis queue, if they are not already
there.

This script finds recent experiments for a platform in the ML warehouse
and compares them with known experiments in the workbot database.

If an analysis for that experiment does not exist it may queue an analysis 
to be done.

"""

parser = argparse.ArgumentParser(
    description=description,
    formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument("-e", "--end-date",
                    help="The latest date of experiment, "
                         "format YYY-MM-DD[ hh:mm:ss]. "
                         "Optional, defaults to the current date",
                    type=valid_iso_date,
                    default=datetime.now())
parser.add_argument("-s", "--start-date",
                    help="The earliest date of experiment, "
                         "format YYY-MM-DD[ hh:mm:ss]. "
                         "Optional, defaults to 5 days earlier than "
                         "the end date",
                    type=valid_iso_date)

parser.add_argument("-w", "--work-type",
                    help="The type of work to be checked for and added "
                         "if any needs to be done",
                    type=valid_work_type, required=True)
parser.add_argument("-z", "--zone",
                    help="The iRODS zone to check for data to work on")

parser.add_argument("-d", "--debug",
                    help="Enable DEBUG level logging to STDERR",
                    action="store_true")
parser.add_argument("-v", "--verbose",
                    help="Enable INFO level logging to STDERR",
                    action="store_true")

args = parser.parse_args()

log = logging.getLogger("main")
level = logging.ERROR
if args.debug:
    level = logging.DEBUG
elif args.verbose:
    level = logging.INFO
logging.basicConfig(format="%(asctime)s %(levelname)s %(module)s - "
                           "%(message)s", level=level)


def main():
    default_start = args.end_date - timedelta(days=5)
    start_date = args.start_date if args.start_date else default_start

    log.info("Checking for runs updated between "
             "{} and {}".format(start_date, args.end_date))

    wh_sess = get_wh_session()
    wb_sess = get_wb_session()

    success = False
    try:
        wb = make_workbot(args.work_type)

        if not wb.has_broker():
            raise WorkBotError("The kind of work you have requested ({}) "
                               "doesn't have a suitable broker available to "
                               "find new work. You will need to "
                               "write one.".format(args.work_type))

        num_added = wb.use_broker(wb_sess,
                                  mlwh_session=wh_sess,
                                  start_date=start_date,
                                  zone=args.zone)

        log.info("Added {} jobs".format(num_added))
        success = True
    except RodsError as e:
        log.error(e.message)
    except WorkBotError as e:
        log.error(e)
    finally:
        wh_sess.close()
        wb_sess.close()

    if not success:
        exit(1)


if __name__ == "__main__":
    main()
