#!/usr/bin/env python

import argparse
import logging
from datetime import datetime, timedelta

from sqlalchemy.exc import SQLAlchemyError

from workbot import get_wb_session, get_wh_session
from workbot.config import GRIDION_MODEL
from workbot.ml_warehouse_schema import find_recent_experiment_pos
from workbot.workbot import add_ont_analyses

description = """
Adds new experiments to the workbot analysis queue, if they are not already
there.

This script finds recent experiments for a platform in the ML warehouse
and compares them with known experiments in the workbot database.

If an analysis for that experiment does not exist it will select an
analysis to be done, while if an analysis does exist it will take no
further action.


"""

parser = argparse.ArgumentParser(
    description=description,
    formatter_class=argparse.RawDescriptionHelpFormatter
)


def valid_isodate(s: str):
    try:
        return datetime.fromisoformat(s)
    except ValueError:
        raise argparse.ArgumentTypeError("Invalid date: '{}'.".format(s))


parser.add_argument("-e", "--end-date",
                    help="The latest date of experiment, "
                         "format YYY-MM-DD[ hh:mm:ss]. "
                         "Optional, defaults to the current date",
                    type=valid_isodate,
                    default=datetime.now())
parser.add_argument("-s", "--start-date",
                    help="The earliest date of experiment, "
                         "format YYY-MM-DD[ hh:mm:ss]. "
                         "Optional, defaults to 5 days earlier than"
                         " the end date",
                    type=valid_isodate)

parser.add_argument("-d", "--debug",
                    help="Enable DEBUG level logging to STDERR",
                    action="store_true")
parser.add_argument("-v", "--verbose",
                    help="Enable INFO level logging to STDERR",
                    action="store_true")

args = parser.parse_args()

log = logging.getLogger("main")
level = logging.ERROR
if args.debug:
    level = logging.DEBUG
elif args.verbose:
    level = logging.INFO
logging.basicConfig(format="%(asctime)s %(levelname)s %(module)s - "
                           "%(funcName)s - %(message)s", level=level)


def main():
    default_start = args.end_date - timedelta(days=5)
    start_date = args.start_date if args.start_date else default_start

    log.info("Checking for runs updated between {} and {}".format(
        start_date, args.end_date))

    wh_sess = get_wh_session()
    try:
        expts = find_recent_experiment_pos(wh_sess, start_date)
    except SQLAlchemyError as e:
        log.error("Failed to find experiments in the warehouse: {}", e)
        raise
    finally:
        wh_sess.close()

    wb_sess = get_wb_session()
    try:
        add_ont_analyses(wb_sess, GRIDION_MODEL, expts)
    except Exception as e:
        log.error("Failed to add analysis for experiments {}".format(expts))
        raise
    finally:
        wb_sess.close()


if __name__ == "__main__":
    main()
